{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Javelin Script",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#annotation"
    },
    {
      "include": "#declaration"
    },
    {
      "include": "#pointer-list"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#keywords"
    }
  ],
  "foldingStartMarker": "\\{\\s*$",
  "foldingStopMarker": "^\\s*\\}",
  "repository": {
    "annotation": {
      "patterns": [
        {
          "name": "markup.italic",
          "begin": "#\\w+\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#constants"
            },
            {
              "name": "keyword",
              "match": "\\b(per_layer|local|true|false)\\b"
            }
          ]
        },
        {
          "name": "markup.italic",
          "match": "#\\w+"
        }
      ]
    },
    "byte-list": {
      "patterns": [
        {
          "name": "string",
          "begin": "\\[\\[",
          "end": "\\]\\]",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "match": "[0-9A-Fa-f]{2}"
            },
            {
              "match": "\\s+"
            },
            {
              "name": "invalid.illegal",
              "match": "."
            }
          ]
        }
      ]
    },
    "character-escapes": {
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\\\x[0-9A-Fa-f]{2}"
        },
        {
          "name": "invalid.illegal",
          "match": "\\\\x.."
        },
        {
          "name": "constant.character.escape",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "begin": "//",
          "end": "\\n"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b\\d+(\\.\\d+)?"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#byte-list"
        }
      ]
    },
    "function-declaration": {
      "patterns": [
        {
          "begin": "\\b(func)\\b\\s*(\\w+)",
          "end": "(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other"
            },
            "2": {
              "name": "entity.name.function"
            }
          },
          "patterns": [
            {
              "name": "keyword",
              "match": "\\bvar\\b"
            }
          ]
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#function-declaration"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword",
          "match": "\\b(const|var)\\b"
        },
        {
          "name": "keyword.control",
          "match": "\\b(for|do|if|while|else|return)\\b"
        },
        {
          "name": "keyword.operator",
          "match": "[@,:;=<>+/*%&|^!\\-]"
        },
        {
          "name": "entity.name.function",
          "match": "\\b(pressScanCode|releaseScanCode|tapScanCode|isScanCodePressed|pressStenoKey|releaseStenoKey|isStenoKeyPressed|releaseAll|isButtonPressed|pressAll|sendText|console|checkButtonState|isInPressAll|setRgb|getTime|getLedStatus|setGpioPin|clearDisplay|setAutoDraw|setScreenOn|setScreenContrast|drawPixel|drawLine|drawImage|drawText|setDrawColor|drawRect|setHsv|rand|isUsbConnected|isUsbSuspended|getParameter|isConnected|getActiveConnection|setPreferredConnection|isPairConnected|startBlePairing|getBleProfile|setBleProfile|isHostSleeping|isMainPowered|isCharging|getBatteryPercentage|getActivePairConnection|setBoardPower|sendEvent|isPairPowered|setInputHint|setScript|isBoardPowered|startTimer|stopTimer|isTimerActive|isBleProfileConnected|disconnectBle|unpairBle|isBleProfilePaired|isBleProfileSleeping|isBleAdvertising|isBleScanning|isWaitingForUserPresence|replyUserPresence|setGpioInputPin|readGpioPin|drawGrayscaleRange|setGpioPinDutyCycle|cancelAllStenoKeys|cancelStenoKey|stopSound|playFrequency|playSequence|playWaveform|callAllReleaseScripts|isInReleaseAll|getPressCount|getReleaseCount|isStenoJoinNext|pressButton|releaseButton|pressMouseButton|releaseMouseButton|tapMouseButton|isMouseButtonPressed|moveMouse|vWheelMouse|setEnableButtonStates|printValue|getWpm|setPairBoardPower|hWheelMouse|enableConsole|disableConsole|isConsoleEnabled|enableFlashWrite|disableFlashWrite|isFlashWriteEnabled|isInReinit|setDrawColorRgb|setDrawColorHsv|drawEffect|sin|cos|tan|asin|acos|atan|atan2|formatString|getAsset|addCombo|resetCombos)\\b"
        }
      ]
    },
    "pointer-list": {
      "patterns": [
        {
          "name": "keyword.operator",
          "match": "\\[\\[\\["
        },
        {
          "name": "keyword.operator",
          "match": "\\]\\]\\]"
        },
        {
          "name": "keyword.operator",
          "match": "\\[\\<"
        },
        {
          "name": "keyword.operator",
          "match": "\\>\\]"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#character-escapes"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.javelin-script"
}