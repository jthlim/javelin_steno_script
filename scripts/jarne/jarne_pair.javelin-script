//---------------------------------------------------------------------------
// Default Jarne pair script.
//---------------------------------------------------------------------------

const CONNECTION_NONE = 0;
const CONNECTION_BLE = 1;
const CONNECTION_USB = 2;
const CONNECTION_USB_PAIR = 3;

const PAIR_CONNECTION_NONE = 0;
const PAIR_CONNECTION_BLE = 1;
const PAIR_CONNECTION_CABLE = 2;

const SCRIPT_ID_DISPLAY_OVERLAY = 0;
const SCRIPT_ID_BATTERY_UPDATE = 1;
const SCRIPT_ID_CONNECTION_UPDATE = 2;
const SCRIPT_ID_PAIR_CONNECTION_UPDATE = 3;
const SCRIPT_ID_KEYBOARD_LED_STATUS_UPDATE = 4;
const SCRIPT_ID_BLE_ADVERTISING_UPDATE = 5;
const SCRIPT_ID_BLE_SCANNING_UPDATE = 6;
const SCRIPT_ID_U2F_STATUS_UPDATE = 7;

const TEXT_ALIGNMENT_LEFT = 0;
const TEXT_ALIGNMENT_MIDDLE = 1;
const TEXT_ALIGNMENT_RIGHT = 2;

const FONT_ID_NORMAL = 0;
const FONT_ID_SMALL_DIGITS = 1;
const FONT_ID_MEDIUM_DIGITS = 2;
const FONT_ID_LARGE_DIGITS = 3;

//---------------------------------------------------------------------------

// Constants passed in from the firmware.
const DISPLAY_WIDTH = JAVELIN_DISPLAY_WIDTH ?? 32;
const DISPLAY_HEIGHT = JAVELIN_DISPLAY_HEIGHT ?? 128;
const HAS_DISPLAY = JAVELIN_HAS_DISPLAY ?? 1;
const HAS_BLE = JAVELIN_HAS_BLE ?? 0;
const HAS_U2F = JAVELIN_HAS_U2F ?? 0;

// Inferred

const USE_STATUS_BAR = HAS_DISPLAY && HAS_BLE;

//---------------------------------------------------------------------------
//
// Jarne button layout:
//
// Button indexes
//
//      0   1   2   3   4   5    |     6   7   8   9  10  11
//     12  13  14  15  16  17    |    18  19  20  21  22  23
//     24  25  26  27  28  29    |    30  31  32  33  34  35
//                   36  37  38  |  39  40  41
//
//---------------------------------------------------------------------------

const PAIR_CONNECTED_STATUS_IMAGE_OFFSETS = [[ 00 02 1c ]];
const PAIR_CONNECTED_STATUS_IMAGES = [[
  // None
  00 00

  // BLE
  0c 0c 00 00 98 00 98 01 98 03 98 07 98 01 98 01
  9e 01 9c 01 98 01 90 01 00 00

  // Cable
  0c 0c 00 00 60 00 f0 00 f8 01 fc 03 f0 00 f0 00
  fc 03 f8 01 f0 00 60 00 00 00
]];

const BATTERY_LEVEL_STATUS_IMAGES = [[
  // battery0
  0c 0c f8 01 08 01 08 01 08 01 08 01 08 01 08 01
  08 01 08 01 08 01 f8 01 f0 00

  // battery1
  0c 0c f8 01 f8 01 08 01 08 01 08 01 08 01 08 01
  08 01 08 01 08 01 f8 01 f0 00

  // battery2
  0c 0c f8 01 f8 01 f8 01 08 01 08 01 08 01 08 01
  08 01 08 01 08 01 f8 01 f0 00

  // battery3
  0c 0c f8 01 f8 01 f8 01 f8 01 08 01 08 01 08 01
  08 01 08 01 08 01 f8 01 f0 00

  // battery4
  0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 08 01 08 01
  08 01 08 01 08 01 f8 01 f0 00

  // battery5
  0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 08 01
  08 01 08 01 08 01 f8 01 f0 00

  // battery6
  0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 f8 01
  08 01 08 01 08 01 f8 01 f0 00

  // battery7
  0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 f8 01
  f8 01 08 01 08 01 f8 01 f0 00

  // battery8
  0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 f8 01
  f8 01 f8 01 08 01 f8 01 f0 00

  // battery9
  0c 0c f8 01 f8 01 f8 01 f8 01 f8 01 f8 01 f8 01
  f8 01 f8 01 f8 01 f8 01 f0 00
]];

const CHARGING_STATUS_IMAGE = [[
  0c 0c f8 01 08 01 08 01 68 01 70 04 78 03 ec 01
  e2 00 68 01 08 01 f8 01 f0 00
]];

const TIMER_ID_RGB_UPDATE = 0;

func init() {
  if (USE_STATUS_BAR) {
    setScript(SCRIPT_ID_DISPLAY_OVERLAY, @drawDisplayOverlay);
  }
  setScript(SCRIPT_ID_BATTERY_UPDATE, @onBatteryUpdate);
  setScript(SCRIPT_ID_CONNECTION_UPDATE, @onConnectionUpdate);
  setScript(SCRIPT_ID_PAIR_CONNECTION_UPDATE, @onPairConnectionUpdate);

  updateBoardPower();
  drawDisplayOverlay();
}

func onBatteryUpdate() {
  updateBoardPower();
  redrawDisplayOverlay();
}

func onConnectionUpdate() {
  updateBoardPower();
}

func onPairConnectionUpdate() {
  updateBoardPower();
  redrawDisplayOverlay();
}

func onU2fStatusUpdate() {
  updateBoardPower();
}

func updateBoardPower() {
  var activePairConnection = getActivePairConnection();
  if (activePairConnection == PAIR_CONNECTION_NONE) {
    updateDisconnectedKeyRgbCycle();
    startTimer(TIMER_ID_RGB_UPDATE, 32, 1, @updateDisconnectedKeyRgbCycle);
    setBoardPower(1);
  } else if (activePairConnection == PAIR_CONNECTION_CABLE) {
    setBoardPower(isMainPowered() || isPairPowered());
    stopTimer(TIMER_ID_RGB_UPDATE);
  } else {
    setBoardPower(isPairPowered());
    stopTimer(TIMER_ID_RGB_UPDATE);
  }
}

const DISCONNECTED_KEY_ORDER = [[ 06 07 08 09 0a 0b 0a 09 08 07 ]];
func updateDisconnectedKeyRgbCycle() {
  for (var i = 0; i < 54; i = i + 1) {
    setRgb(i, 0, 0, 0);
  }

  var index = getTime() >> 6;
  var keyId = DISCONNECTED_KEY_ORDER[index % 10];
  setHsv(keyId, index << 10, 0xf0, 16);
}

func drawDisplayOverlay() {
  if (!HAS_DISPLAY) return;

  // Clear the region.
  setDrawColor(1, 0);
  drawRect(1, 0, 0, DISPLAY_WIDTH, 16);
  setDrawColor(1, 1);

  // Draw paired icon
  drawImage(
    1,
    2, 0,
    PAIR_CONNECTED_STATUS_IMAGES
      + PAIR_CONNECTED_STATUS_IMAGE_OFFSETS[getActivePairConnection()]
  );

  // Draw battery
  if (isPairPowered()) {
    if (isCharging()) {
      drawImage(1, DISPLAY_WIDTH-14, 0, CHARGING_STATUS_IMAGE);
    }
  } else {
    // Map 0-100 -> 0-9.
    // (value * 9 + 50) / 100
    var batteryIndex = (getBatteryPercentage() * 9 + 50) / 100;
    drawImage(1, DISPLAY_WIDTH-14, 0, BATTERY_LEVEL_STATUS_IMAGES + batteryIndex * 26);
  }
}

func redrawDisplayOverlay() {
  if (!HAS_DISPLAY) return;

  // Mark the screen dirty
  drawRect(1, 0, 0, 0, 0);
}

//---------------------------------------------------------------------------

func onPress0() { }
func onRelease0() { }

func onPress1() { }
func onRelease1() { }

func onPress2() { }
func onRelease2() { }

func onPress3() { }
func onRelease3() { }

func onPress4() { }
func onRelease4() { }

func onPress5() { }
func onRelease5() { }

func onPress6() { }
func onRelease6() { }

func onPress7() { }
func onRelease7() { }

func onPress8() { }
func onRelease8() { }

func onPress9() { }
func onRelease9() { }

func onPress10() { }
func onRelease10() { }

func onPress11() { }
func onRelease11() { }

func onPress12() { }
func onRelease12() { }

func onPress13() { }
func onRelease13() { }

func onPress14() { }
func onRelease14() { }

func onPress15() { }
func onRelease15() { }

func onPress16() { }
func onRelease16() { }

func onPress17() { }
func onRelease17() { }

func onPress18() { }
func onRelease18() { }

func onPress19() { }
func onRelease19() { }

func onPress20() { }
func onRelease20() { }

func onPress21() { }
func onRelease21() { }

func onPress22() { }
func onRelease22() { }

func onPress23() { }
func onRelease23() { }

// 3rd row
func onPress24() { }
func onRelease24() { }

func onPress25() { }
func onRelease25() { }

func onPress26() { }
func onRelease26() { }

func onPress27() { }
func onRelease27() { }

func onPress28() { }
func onRelease28() { }

func onPress29() { }
func onRelease29() { }

func onPress30() { }
func onRelease30() { }

func onPress31() { }
func onRelease31() { }

func onPress32() { }
func onRelease32() { }

func onPress33() { }
func onRelease33() { }

func onPress34() { }
func onRelease34() { }

func onPress35() { }
func onRelease35() { }

// 4th row
func onPress36() { }
func onRelease36() { }

func onPress37() { }
func onRelease37() { }

func onPress38() { }
func onRelease38() { }

func onPress39() { }
func onRelease39() { }

func onPress40() { }
func onRelease40() { }

func onPress41() { }
func onRelease41() { }
