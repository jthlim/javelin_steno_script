//---------------------------------------------------------------------------
// Default Kyria rev3 script.
//---------------------------------------------------------------------------

// Steno
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |        |  S1  |   T  |   P  |   H  |  *1  |                              |  *2  |   F  |   P  |   L  |   T  |    D   |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |        |  S2  |   K  |   W  |   R  |  *3  |                              |  *4  |   R  |   B  |   G  |   S  |    Z   |
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |        |      |      |      |      |      |      |CapsLk|  |F-keys|      |      |      |      |      |      |        |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |QWERTY|  #1  |   A  |   O  | Nav  |  | Sym  |  E   |   U  |  #2  |Settin|
//                        `----------------------------------'  `----------------------------------'
//
// * Tapping QWERTY key will switch to QWERTY mode
// * Holding it down and pressing other buttons will cause the keyboard to return to steno mode when releasing it.

// QWERTY
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |  Tab   |   Q  |   W  |   E  |   R  |   T  |                              |   Y  |   U  |   I  |   O  |   P  |  Bksp  |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |Ctrl/Esc|   A  |   S  |   D  |   F  |   G  |                              |   H  |   J  |   K  |   L  | ;  : |Ctrl/' "|
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// | LShift |   Z  |   X  |   C  |   V  |   B  | [ {  |CapsLk|  |F-keys|  ] } |   N  |   M  | ,  < | . >  | /  ? | RShift |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |Steno | LGUI | LAlt/| Space| Nav  |  | Sym  | Space| RAlt/| RGUI |Settin|
//                        |      |      | Enter|      |      |  |      |      | Enter|      |    gs|
//                        `----------------------------------'  `----------------------------------'
//

//
// Symbols
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |    `   |   1  |   2  |   3  |   4  |   5  |                              |   6  |   7  |   8  |   9  |   0  |   =    |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |    ~   |   !  |   @  |   #  |   $  |   %  |                              |   ^  |   &  |   *  |   (  |   )  |   +    |
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |    |   |   \  |   :  |   ;  |   -  |   [  |   {  |      |  |      |   }  |   ]  |   _  |   ,  |   .  |   /  |   ?    |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |      | LGUI | LAlt | LCtrl|      |  |      |      |      |      |      |
//                        `----------------------------------'  `----------------------------------'
//

//
// Function
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |        |  F9  | F10  | F11  | F12  |      |                              |      |      |      |      |      |        |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |        |  F5  |  F6  |  F7  |  F8  |      |                              |      | Shift| Ctrl |  Alt |  GUI |        |
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |        |  F1  |  F2  |  F3  |  F4  |      |      |      |  |      |      |      |      |      |      |      |        |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |      |      |      |      |      |  |      |      |      |      |      |
//                        `----------------------------------'  `----------------------------------'

//
// Navigation/Media
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |        |      |      |      |      |      |                              | Vol+ | BkSp |   ↑  | Del  | PgUp |  Home  |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |        |  GUI |  Alt | Ctrl | Shift|      |                              | Vol- |  ←   |   ↓  |   →  | PgDn |   End  |
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |        |      |      |      |      |      |      |      |  |      |      | Mute |      |      |      |      |        |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |      |      |      |      |      |  |      | Space| Enter|      |      |
//                        `----------------------------------'  `----------------------------------'
//

//
// Settings
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |        |      |      |Embedd|      |      |                              |Speed+|      |Brght+| Sat+ | Hue+ |HueSprd+|
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |        |      |      |Gemini|      |      |                              |Speed-|      |Brght-| Sat- | Hue- |HueSprd-|
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |        |      |      |PloHID|      |      |      |      |  |      |      |      |      |      |      |      |        |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |      |      |      |      |      |  |      |      |      |      |      |
//                        `----------------------------------'  `----------------------------------'
//

//---------------------------------------------------------------------------
// USB Scan code values.
//
// These constants are used with inbuilt functions:
//  * func pressScanCode(SC_xxx)
//  * func releaseScanCode(SC_xxx)
//  * func tapScanCode(SC_xxx)
//  * func isScanCodePressed(SC_xxx) var
//
//---------------------------------------------------------------------------

const SC_NONE = 0;

const SC_A = 0x04;
const SC_B = 0x05;
const SC_C = 0x06;
const SC_D = 0x07;
const SC_E = 0x08;
const SC_F = 0x09;
const SC_G = 0x0a;
const SC_H = 0x0b;
const SC_I = 0x0c;
const SC_J = 0x0d;
const SC_K = 0x0e;
const SC_L = 0x0f;
const SC_M = 0x10;
const SC_N = 0x11;
const SC_O = 0x12;
const SC_P = 0x13;
const SC_Q = 0x14;
const SC_R = 0x15;
const SC_S = 0x16;
const SC_T = 0x17;
const SC_U = 0x18;
const SC_V = 0x19;
const SC_W = 0x1a;
const SC_X = 0x1b;
const SC_Y = 0x1c;
const SC_Z = 0x1d;

const SC_1 = 0x1e;
const SC_2 = 0x1f;
const SC_3 = 0x20;
const SC_4 = 0x21;
const SC_5 = 0x22;
const SC_6 = 0x23;
const SC_7 = 0x24;
const SC_8 = 0x25;
const SC_9 = 0x26;
const SC_0 = 0x27;

const SC_ENTER = 0x28;
const SC_ESC = 0x29;
const SC_BACKSPACE = 0x2a;
const SC_TAB = 0x2b;
const SC_SPACE = 0x2c;
const SC_MINUS = 0x2d;
const SC_EQUAL = 0x2e;
const SC_L_BRACKET = 0x2f;
const SC_R_BRACKET = 0x30;
const SC_BACKSLASH = 0x31;
const SC_HASH_TILDE = 0x32;
const SC_SEMICOLON = 0x33;
const SC_APOSTROPHE = 0x34;
const SC_GRAVE = 0x35;
const SC_COMMA = 0x36;
const SC_DOT = 0x37;
const SC_SLASH = 0x38;
const SC_CAPS = 0x39;

const SC_F1 = 0x3a;
const SC_F2 = 0x3b;
const SC_F3 = 0x3c;
const SC_F4 = 0x3d;
const SC_F5 = 0x3e;
const SC_F6 = 0x3f;
const SC_F7 = 0x40;
const SC_F8 = 0x41;
const SC_F9 = 0x42;
const SC_F10 = 0x43;
const SC_F11 = 0x44;
const SC_F12 = 0x45;

const SC_SYS_RQ = 0x46;
const SC_SCROLL_LOCK = 0x47;
const SC_PAUSE = 0x48;
const SC_INSERT = 0x49;
const SC_HOME = 0x4a;
const SC_PAGE_UP = 0x4b;
const SC_DELETE = 0x4c;
const SC_END = 0x4d;
const SC_PAGE_DOWN = 0x4e;
const SC_RIGHT = 0x4f;
const SC_LEFT = 0x50;
const SC_DOWN = 0x51;
const SC_UP = 0x52;

const SC_NUM_LOCK = 0x53;
const SC_KP_SLASH = 0x54;
const SC_KP_ASTERISK = 0x55;
const SC_KP_MINUS = 0x56;
const SC_KP_PLUS = 0x57;
const SC_KP_ENTER = 0x58;
const SC_KP_1 = 0x59;
const SC_KP_2 = 0x5a;
const SC_KP_3 = 0x5b;
const SC_KP_4 = 0x5c;
const SC_KP_5 = 0x5d;
const SC_KP_6 = 0x5e;
const SC_KP_7 = 0x5f;
const SC_KP_8 = 0x60;
const SC_KP_9 = 0x61;
const SC_KP_0 = 0x62;
const SC_KP_DOT = 0x63;

const SC_BACKSLASH_PIPE = 0x64;
const SC_COMPOSE = 0x65;
const SC_POWER = 0x66;
const SC_KP_EQUAL = 0x67;

const SC_F13 = 0x68;
const SC_F14 = 0x69;
const SC_F15 = 0x6a;
const SC_F16 = 0x6b;
const SC_F17 = 0x6c;
const SC_F18 = 0x6d;
const SC_F19 = 0x6e;
const SC_F20 = 0x6f;
const SC_F21 = 0x70;
const SC_F22 = 0x71;
const SC_F23 = 0x72;
const SC_F24 = 0x73;

const SC_OPEN = 0x74;
const SC_HELP = 0x75;
const SC_MENU = 0x76;
const SC_SELECT = 0x77;
const SC_STOP = 0x78;
const SC_AGAIN = 0x79;
const SC_UNDO = 0x7a;
const SC_CUT = 0x7b;
const SC_COPY = 0x7c;
const SC_PASTE = 0x7d;
const SC_FIND = 0x7e;
const SC_MUTE = 0x7f;
const SC_VOLUME_UP = 0x80;
const SC_VOLUME_DOWN = 0x81;
const SC_KP_COMMA = 0x85;

const SC_L_CTRL = 0xe0;
const SC_L_SHIFT = 0xe1;
const SC_L_ALT = 0xe2;
const SC_L_META = 0xe3;
const SC_R_CTRL = 0xe4;
const SC_R_SHIFT = 0xe5;
const SC_R_ALT = 0xe6;
const SC_R_META = 0xe7;

// From Consumer Page (0x0c)
const SC_CONSUMER_PLAY = 0xa0;                // UsageId 0xb0
const SC_CONSUMER_PAUSE = 0xa1;               // UsageId 0xb1
const SC_CONSUMER_RECORD = 0xa2;              // UsageId 0xb2
const SC_CONSUMER_FAST_FORWARD = 0xa3;        // UsageId 0xb3
const SC_CONSUMER_REWIND = 0xa4;              // UsageId 0xb4
const SC_CONSUMER_SCAN_NEXT_TRACK = 0xa5;     // UsageId 0xb5
const SC_CONSUMER_SCAN_PREVIOUS_TRACK = 0xa6; // UsageId 0xb6
const SC_CONSUMER_STOP = 0xa7;                // UsageId 0xb7
const SC_CONSUMER_EJECT = 0xa8;               // UsageId 0xb8

const SC_CONSUMER_STOP_EJECT = 0xbc;          // UsageId 0xcc
const SC_CONSUMER_PLAY_PAUSE = 0xbd;          // UsageId 0xcd
const SC_CONSUMER_PLAY_SKIP = 0xbe;           // UsageId 0xce

const SC_CONSUMER_MUTE = 0xd2;                // UsageId 0xe2
const SC_CONSUMER_VOLUME_UP = 0xd9;           // UsageId 0xe9
const SC_CONSUMER_VOLUME_DOWN = 0xda;         // UsageId 0xea

//---------------------------------------------------------------------------
// javelin-steno steno key values.
//
// These constants are used with inbuilt functions:
//  * func pressStenoKey(SK_xxx)
//  * func releaseStenoKey(SK_xxx)
//  * func isStenoKeyPressed(SK_xxx) var
//
//---------------------------------------------------------------------------

const SK_NONE = -1;
const SK_S1 = 0;
const SK_S2 = 1;
const SK_TL = 2;
const SK_KL = 3;
const SK_PL = 4;
const SK_WL = 5;
const SK_HL = 6;
const SK_RL = 7;
const SK_A = 8;
const SK_O = 9;
const SK_STAR1 = 10;
const SK_STAR2 = 11;
const SK_STAR3 = 12;
const SK_STAR4 = 13;
const SK_E = 14;
const SK_U = 15;
const SK_FR = 16;
const SK_RR = 17;
const SK_PR = 18;
const SK_BR = 19;
const SK_LR = 20;
const SK_GR = 21;
const SK_TR = 22;
const SK_SR = 23;
const SK_DR = 24;
const SK_ZR = 25;
const SK_NUM1 = 26;
const SK_NUM2 = 27;
const SK_NUM3 = 28;
const SK_NUM4 = 29;
const SK_NUM5 = 30;
const SK_NUM6 = 31;
const SK_NUM7 = 32;
const SK_NUM8 = 33;
const SK_NUM9 = 34;
const SK_NUM10 = 35;
const SK_NUM11 = 36;
const SK_NUM12 = 37;
const SK_FUNCTION = 38;
const SK_POWER = 39;
const SK_RES1 = 40;
const SK_RES2 = 41;

//---------------------------------------------------------------------------
// Other functions:
//
//  * func releaseAll()
//    - releases all pressed scan codes and steno keys.
//  * func pressAll()
//    - call all press scripts for buttons that are pressed.
//  * func isInPressAll() var
//    - returns non-zero if a pressAll is being processed.
//  * func isButtonPressed(buttonIndex) var
//    - Returns 1 if the physical button is pressed.
//  * func checkButtonState("01 10") var
//    - Returns if the current button state matches the string.
//    - 0 = not pressed, space = ignore, all others = pressed.
//      - The example string checks that:
//        - button 0 is off.
//        - button 1 is on.
//        - button 3 is on.
//        - button 4 is off.
//    - The string should be the same length as the number of buttons.
//  * func sendText("Example")
//    - Sends all of the key presses required to emit the specified string.
//    - e.g.,
//      - Press Shift
//      - Press E
//      - Release E
//      - Release Shift
//      - Press X
//      - Release X
//      - etc.
//  * func setRgb(id, r, g, b)
//    - For boards with rgb lights, sets an individual light to the r, g, b.
//  * func setHsv(id, h, s, v)
//    - For boards with rgb lights, sets an individual light to h, s, v.
//      - h = hue,        0-65536 represents 0°  - 360°
//      - s = saturation, 0-256   represents 0.0 - 1.0
//      - v = value,      0-255   represents 0.0 - 1.0
//  * func getTime() var
//    - Returns milliseconds since launch.
//  * func getLedStatus(id) var
//    - Returns whether the led statues is on. See LED_STATUS constants.
//
// releaseAll() and pressAll() are useful for changing modes/layers, e.g.:
//
// if (layer != SYMBOL_LAYER) {
//   releaseAll();
//   layer = SYMBOL_LAYER;
//   pressAll();
// }
//
// This will allow keys on the symbol layer to be pressed 'out-of-order' but
// still behave as expected.
//
// It is important that every pressAll() call in an onPress handler is guarded
// to prevent infinite recursion, since the onPress will be re-run even for the
// current key. The easiest way to do this is using isInPressAll() function.
//

const LED_STATUS_NUM_LOCK = 0;
const LED_STATUS_CAPS_LOCK = 1;
const LED_STATUS_SCROLL_LOCK = 2;
const LED_STATUS_COMPOSE = 3;
const LED_STATUS_KANA = 4;

//---------------------------------------------------------------------------
// Drawing methods:
//  * func clearDisplay(displayId)
//  * func setAutoDraw(displayId, autoDrawId)
//  * func setDrawColor(displayId, color)
//  * func drawPixel(displayId, x, y)
//  * func drawLine(displayId, x1, y1, x2, y2)
//  * func drawRect(displayId, left, top, right, bottom)
//  * func drawImage(displayId, x, y, image)
//  * func drawText(displayId, x, y, fontId, alignment, text)

const AUTO_DRAW_NONE = 0;
const AUTO_DRAW_PAPER_TAPE = 1;
const AUTO_DRAW_STENO_LAYOUT = 2;
const AUTO_DRAW_WPM = 3;

const TEXT_ALIGNMENT_LEFT = 0;
const TEXT_ALIGNMENT_MIDDLE = 1;
const TEXT_ALIGNMENT_RIGHT = 2;

//---------------------------------------------------------------------------
//
// Kyria rev3 button layout:
//
// Button indexes
//
//      0   1   2   3   4   5          |           6   7   8   9  10  11
//     12  13  14  15  16  17          |          18  19  20  21  22  23
//     24  25  26  27  28  29  30  31  |  32  33  34  35  36  37  38  39
//                 40  41  42  43  44  |  45  46  47  48  49
//
// RGB indices follow button indices, with underglow lights defined from 50-61.
//
//---------------------------------------------------------------------------
// Example global variable:
//   var layers = 0;

// Example local functions:
//
//   func useNavLayer() var {
//     return isButtonPressed(22);
//   }
//
//   func handlePress(stenoKey, navKey) {
//     if (useNavLayer()) {
//       pressScanCode(navKey);
//     } else {
//       pressStenoKey(stenoKey);
//     }
//   }
//
// Then the onPress handler could call handlePress(SK_S1, SC_TAB);

//---------------------------------------------------------------------------
// The script needs to have onPress## and onRelease## functions for every
// physical button.
//---------------------------------------------------------------------------

const QWERTY_LAYER = 0;
const STENO_MASK = 1;
const SYMBOL_MASK = 2;
const FUNCTION_MASK = 4;
const NAV_MASK = 8;
const SETTINGS_MASK = 16;

var layer = STENO_MASK;
var otherPressCount = 0;
var speed = 1;
var hueSpread = 4;
var hueShift = 0;
var brightness = 3;
var saturation = 5;
var lastActionTime = 0;
var lastCapsLockStatus = 0;

const SYM_SHIFT = 0x100;
const TAP_THRESHOLD = 200; // milliseconds for keys that have alternates.
const SCREEN_OFF_TIMEOUT = 30000; // 30 seconds.

const SHIFT_IMAGE = [[
  10 10
  00 01 80 01 c0 01 e0 01 f0 7f f8 7f fc 7f fe 7f
  fe 7f fc 7f f8 7f f0 7f e0 01 c0 01 80 01 00 01
]];

const CONTROL_IMAGE = [[
  10 10
  00 00 00 00 40 00 60 00 30 00 18 00 0c 00 06 00
  06 00 0c 00 18 00 30 00 60 00 40 00 00 00 00 00
]];

const ALT_IMAGE = [[
  10 10
  00 00 00 30 00 30 00 30 00 30 00 38 00 1e 80 07
  e0 01 78 30 1c 30 0c 30 0c 30 0c 30 0c 30 00 00
]];

const COMMAND_IMAGE = [[
  10 10
  00 00 3c 3c 7e 7e 66 66 66 66 fe 7f fc 3f 60 06
  60 06 fc 3f fe 7f 66 66 66 66 7e 7e 3c 3c 00 00
]];

const CAPS_LOCK_IMAGE = [[
  10 10
  00 01 80 01 c0 01 e0 01 f0 67 f8 67 fc 67 fe 67
  fe 67 fc 67 f8 67 f0 67 e0 01 c0 01 80 01 00 01
]];

const FUNCTION_IMAGE = [[
  20 20
  f0 ff ff 0f f8 ff ff 1f 0c 00 00 30 06 00 00 60
  03 00 00 c0 03 00 06 c0 03 00 06 c0 03 c0 ff c7
  03 e0 ff c7 03 60 06 c0 03 60 06 c0 03 00 00 c0
  03 00 fe c7 03 00 fe c7 03 00 0c c0 03 00 06 c0
  03 00 0e c0 03 00 fc c7 03 00 f8 c7 03 00 00 c0
  03 00 00 c0 03 00 00 c0 03 00 00 c0 03 00 00 c0
  03 00 00 c0 03 00 00 c0 03 00 00 c0 03 00 00 c0
  06 00 00 60 0c 00 00 30 f8 ff ff 1f f0 ff ff 0f
]];

const QWERTY_IMAGE = [[
  40 10 f0 01 f8 03 fc 07 0e 36 06 3c 02 1c 02 1c
  06 1c 0e 36 fc 77 f8 73 f2 61 1e 60 fe 30 f2 07
  c0 07 f0 00 7e 00 fe 00 f0 01 c0 07 f2 07 7e 00
  0e 00 02 00 02 04 fe 07 fe 07 62 04 62 04 f2 04
  06 06 0e 07 00 00 02 04 fe 07 fe 07 62 04 e2 00
  f6 05 be 07 1c 07 00 04 0e 00 06 00 02 04 02 04
  fe 07 fe 07 02 04 02 04 06 00 0e 00 02 00 06 00
  0e 00 3e 04 fa 04 f0 07 e0 07 7a 04 1e 04 06 00
  02 00
]];

const SYMBOL_IMAGE = [[
  80 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00
  00 00 40 00 00 00 08 00 40 00 00 00 10 00 80 80
  ff 07 20 00 80 00 00 00 00 00 40 00 00 00 00 00
  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  00 00 00 80 01 00 40 20 00 00 06 00 20 20 00 00
  18 00 f0 3f fc 09 60 00 00 20 00 00 80 01 00 20
  00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00
  20 20 88 0f 00 00 10 30 44 08 00 00 10 28 44 08
  00 00 10 24 44 08 18 03 10 23 84 1f 00 00 e0 20
  0c 10 00 00 00 00 38 18 00 00 00 00 c0 07 00 00
  00 00 00 00 00 00 20 10 00 02 00 00 10 20 20 1e
  00 00 10 21 e0 03 00 08 10 21 3c 02 18 07 90 22
  20 1e 00 00 60 1c e0 03 00 00 00 00 3c 02 00 00
  00 00 20 00 00 00 00 00 00 00 00 00 00 07 38 04
  20 00 c0 04 44 08 20 00 30 04 ff 3f 20 00 00 04
  44 08 20 00 00 3f 88 07 20 00 00 00 00 00 00 00
  00 00 00 00 00 00 00 00 18 00 00 00 f0 11 24 0c
  00 00 10 21 24 02 00 00 10 21 98 c1 ff 0f 10 21
  40 40 00 08 10 21 30 46 00 08 10 1e 08 09 00 00
  00 00 04 09 00 00 00 00 00 06 00 00 00 00 00 00
  00 00 00 00 00 00 10 00 00 00 00 00 10 00 00 00
  00 80 ef 07 00 00 00 40 00 08 00 00 00 40 00 08
  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  00 00 00 00 00 00 00 00 00 00 00 40 00 08 00 00
  00 40 00 08 00 00 00 80 ef 07 00 00 00 00 10 00
  00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00
  00 00 00 00 00 00 00 00 80 0f 00 00 00 00 60 12
  18 00 00 00 10 21 06 40 00 08 10 21 01 40 00 08
  10 21 06 c0 ff 0f 00 1e 18 00 00 00 00 00 00 00
  00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00
  b8 07 00 10 10 20 64 08 00 10 10 1c 44 08 00 10
  10 03 44 08 00 10 d0 00 48 04 00 10 30 00 c8 03
  00 10 00 00 40 00 00 00 00 00 00 00 00 00 00 0c
  40 00 00 00 e0 12 40 02 00 00 10 21 40 01 00 00
  10 21 f8 00 00 0b 10 21 40 01 00 07 e0 12 40 02
  00 00 00 0c 40 00 00 00 00 00 00 00 00 00 00 00
  00 00 00 00 e0 11 00 00 00 00 10 22 f8 07 00 00
  10 22 04 08 00 03 10 22 02 10 00 03 20 11 00 00
  00 00 c0 0f 00 00 00 00 00 00 00 00 00 00 00 00
  00 00 00 00 00 00 00 00 00 04 c0 0f 00 00 00 03
  20 10 00 00 c0 00 10 20 02 10 30 00 10 20 04 08
  0c 00 20 10 f8 07 03 00 c0 0f 00 80 00 00 00 00
  00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00
  00 04 40 00 01 00 00 04 40 00 01 00 00 04 f8 03
  f1 02 00 04 40 00 09 00 00 04 40 00 06 00 00 00
  40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  00 00
]];

const NAVIGATION_IMAGE = [[
  20 20
  00 00 00 00 00 80 01 00 00 40 02 00 00 20 04 00
  00 10 08 00 00 08 10 00 00 3c 3c 00 00 20 04 00
  00 20 04 00 00 20 04 00 40 20 04 02 60 e0 07 06
  50 00 00 0a c8 0f f0 13 04 08 10 20 02 08 10 40
  02 08 10 40 04 08 10 20 c8 0f f0 13 50 00 00 0a
  60 e0 07 06 40 20 04 02 00 20 04 00 00 20 04 00
  00 20 04 00 00 3c 3c 00 00 08 10 00 00 10 08 00
  00 20 04 00 00 40 02 00 00 80 01 00 00 00 00 00
]];

const SETTINGS_IMAGE = [[
  20 20 00 00 00 00 00 c0 03 00 00 e0 07 00 00 e0
  07 00 c0 e0 07 03 e0 f3 cf 07 f0 ff ff 0f f0 ff
  ff 0f e0 ff ff 07 e0 ff ff 07 c0 ff ff 03 c0 7f
  fe 03 e0 1f f8 07 fc 0f f0 3f fe 0f f0 7f fe 07
  e0 7f fe 07 e0 7f fe 0f f0 7f fc 0f f0 3f e0 1f
  f8 07 c0 7f fe 03 c0 ff ff 03 e0 ff ff 07 e0 ff
  ff 07 f0 ff ff 0f f0 ff ff 0f e0 f3 cf 07 c0 e0
  07 03 00 e0 07 00 00 e0 07 00 00 c0 03 00 00 00
  00 00
]];

const SPEED_IMAGE = [[
  10 10 80 1f e0 3f f0 30 38 30 18 30 1c 30 0c 30
  0c 36 0c 37 8c 33 dc 31 d8 30 38 30 f0 30 e0 3f
  80 1f
]];

const BRIGHTNESS_IMAGE = [[
  10 10 80 01 86 61 8e 71 1c 38 d8 1b e0 07 70 0e
  37 ec 37 ec 70 0e e0 07 d8 1b 1c 38 8e 71 86 61
  80 01
]];

const CONTRAST_IMAGE = [[
  10 10 e0 07 f8 1f 3c 3c 0e 70 06 60 07 e0 03 c0
  03 c0 ff ff ff ff ff ff fe 7f fe 7f fc 3f f8 1f
  e0 07
]];

const HUE_SPREAD_IMAGE = [[
  10 10 e0 07 f8 1f 3c 3c 8e 71 c6 63 e7 e7 83 c1
  83 c1 ff ff 7f fe 7f fe 1e 78 3e 7c 7c 3e f8 1f
  e0 07
]];

const BAR_IMAGES = [[
  // BAR_000_IMAGE
  40 08 3c 42 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  42 3c

  // BAR_125_IMAGE
  40 08 3c 7e ff ff ff ff ff ff 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  42 3c

  // BAR_250_IMAGE
  40 08 3c 7e ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  42 3c

  // BAR_375_IMAGE
  40 08 3c 7e ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  42 3c

  // BAR_500_IMAGE
  40 08 3c 7e ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  42 3c

  // BAR_625_IMAGE
  40 08 3c 7e ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff 81 81 81 81 81 81
  81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  42 3c

  // BAR_750_IMAGE
  40 08 3c 7e ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff 81 81 81 81 81 81 81 81 81 81 81 81 81 81
  42 3c

  // BAR_875_IMAGE
  40 08 3c 7e ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff 81 81 81 81 81 81
  42 3c

  // BAR_1000_IMAGE
  40 08 3c 7e ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
  7e 3c
]];

func init() {
  updateKeyRgb();
  updateUnderglowRgb();
  updateScreenContrast();

  // Disable liatris power light.
  setGpioPin(24, 1);

  updateDisplay0();
  setAutoDraw(1, AUTO_DRAW_WPM);
}

const RGB_UPDATE_TIME = 20;
var lastRgbUpdateTime = 0;

func tick() {
  var time = getTime();
  var screenOn = time - lastActionTime <= SCREEN_OFF_TIMEOUT;
  setScreenOn(0, screenOn);
  setScreenOn(1, screenOn);

  if (time - lastRgbUpdateTime >= RGB_UPDATE_TIME) {
    lastRgbUpdateTime = time;
    updateKeyRgb();
  }

  var capsLockStatus = getLedStatus(LED_STATUS_CAPS_LOCK);
  if (capsLockStatus != lastCapsLockStatus)  {
    lastCapsLockStatus = capsLockStatus;
    updateKeyRgb();
    updateDisplay0();
  }
}

const HUE_CYCLE_RGB_ORDER = [[
  00 01 02 03
  0c 0d 0e 0f 04 05
  18 19 1a 1b 10 11
  28 29 1c
  2a 1d
  2b 1e
  2c 1f

  2d 20
  2e 21
  2f 22
  31 30 23
  27 26 25 24 13 12
  17 16 15 14 07 06
  0b 0a 09 08
]];

const SPEED_VALUES      = [[ 00 04 08 0c 10 18 20 30 40 ]];
const HUE_SPREAD_VALUES = [[ 00 10 20 28 30 38 40 48 50 ]];
const SATURATION_VALUES = [[ 00 20 40 50 60 68 70 78 80 ]];
const BRIGHTNESS_VALUES = [[ 00 08 10 20 30 40 50 60 80 ]];

func updateKeyRgbHueCycle(hShift, sat, spreadMultiplier, value) {
  for (var i = 0; i < 50; i = i + 1) {
    setHsv(
      HUE_CYCLE_RGB_ORDER[i],
      spreadMultiplier*i + hShift,
      sat,
      value
    );
  }
}

func updateKeyConstantColor(r, g, b) {
  for (var i = 0; i < 50; i = i + 1) {
    setRgb(i, r, g, b);
  }
}

// 256 step sine table.
const SINE_TABLE = [[ 80 83 86 89 8c 8f 92 95 98 9b 9e a2 a5 a7 aa ad b0 b3 b6 b9 bc be c1 c4 c6 c9 cb ce d0 d3 d5 d7 da dc de e0 e2 e4 e6 e8 ea eb ed ee f0 f1 f3 f4 f5 f6 f8 f9 fa fa fb fc fd fd fe fe fe ff ff ff ff ff ff ff fe fe fe fd fd fc fb fa fa f9 f8 f6 f5 f4 f3 f1 f0 ee ed eb ea e8 e6 e4 e2 e0 de dc da d7 d5 d3 d0 ce cb c9 c6 c4 c1 be bc b9 b6 b3 b0 ad aa a7 a5 a2 9e 9b 98 95 92 8f 8c 89 86 83 80 7c 79 76 73 70 6d 6a 67 64 61 5d 5a 58 55 52 4f 4c 49 46 43 41 3e 3b 39 36 34 31 2f 2c 2a 28 25 23 21 1f 1d 1b 19 17 15 14 12 11 0f 0e 0c 0b 0a 09 07 06 05 05 04 03 02 02 01 01 01 00 00 00 00 00 00 00 01 01 01 02 02 03 04 05 05 06 07 09 0a 0b 0c 0e 0f 11 12 14 15 17 19 1b 1d 1f 21 23 25 28 2a 2c 2f 31 34 36 39 3b 3e 41 43 46 49 4c 4f 52 55 58 5a 5d 61 64 67 6a 6d 70 73 76 79 7c ]];
func updateKeyBreatheCycle() {
  // Sine wave between 4-20 brightness, with staggerring of r, g, b values
  // to reduce harsh steps.
  var w = (0xc00 + (SINE_TABLE[(getTime() >> 5) & 0xff] - 0x80) * (2 * 8));
  updateKeyConstantColor((w + 0x53) >> 8, w >> 8, (w + 0xa6) >> 8);
}

func updateKeyRgb() {
  if (isUsbSuspended()) {
    updateKeyBreatheCycle();
  } else {
    updateKeyRgbHueCycle(
      getTime() * SPEED_VALUES[speed] + hueShift,
      SATURATION_VALUES[saturation] * 2,
      HUE_SPREAD_VALUES[hueSpread] * 16,
      BRIGHTNESS_VALUES[brightness]
    );
  }

  if (getLedStatus(LED_STATUS_CAPS_LOCK)) {
    setRgb(31, 128, 128, 128);
  }
}

func setUnderglow(r, g, b) {
  var finalR = r * brightness >> 3;
  var finalG = g * brightness >> 3;
  var finalB = b * brightness >> 3;
  for(var i = 50; i < 62; i = i + 1) {
    setRgb(i, finalR, finalG, finalB);
  }
}

func updateUnderglowRgb() {
  if (layer & STENO_MASK) {
    setUnderglow(64, 64, 64);
  } else {
    setUnderglow(53, 32, 64);
  }
}

func updateScreenContrast() {
  var contrast = 16 + 30 * brightness;
  setScreenContrast(0, contrast);
  setScreenContrast(1, contrast);
}

func drawDisplay0NonSteno(layerImage, x, y) {
  setAutoDraw(0, AUTO_DRAW_NONE);
  clearDisplay(0);
  drawImage(0, x, y, layerImage);

  var iconCount = (isScanCodePressed(SC_L_SHIFT) || isScanCodePressed(SC_R_SHIFT))
    + (isScanCodePressed(SC_L_CTRL) || isScanCodePressed(SC_R_CTRL))
    + (isScanCodePressed(SC_L_ALT) || isScanCodePressed(SC_R_ALT))
    + (isScanCodePressed(SC_L_META) || isScanCodePressed(SC_R_META));

  var iconXOffset = 66 - iconCount * 10;

  if (isScanCodePressed(SC_L_SHIFT) || isScanCodePressed(SC_R_SHIFT)) {
    drawImage(0, iconXOffset, 48, SHIFT_IMAGE);
    iconXOffset = iconXOffset + 20;
  }
  if (isScanCodePressed(SC_L_CTRL) || isScanCodePressed(SC_R_CTRL)) {
    drawImage(0, iconXOffset, 48, CONTROL_IMAGE);
    iconXOffset = iconXOffset + 20;
  }
  if (isScanCodePressed(SC_L_ALT) || isScanCodePressed(SC_R_ALT)) {
    drawImage(0, iconXOffset, 48, ALT_IMAGE);
    iconXOffset = iconXOffset + 20;
  }
  if (isScanCodePressed(SC_L_META) || isScanCodePressed(SC_R_META)) {
    drawImage(0, iconXOffset, 48, COMMAND_IMAGE);
  }

  if (getLedStatus(LED_STATUS_CAPS_LOCK)) {
    drawImage(0, 112, 48, CAPS_LOCK_IMAGE);
  }
}

func updateDisplay0() {
  if (layer & SETTINGS_MASK) {
    drawDisplay0NonSteno(SETTINGS_IMAGE, 48, 8);
  } else if (layer & NAV_MASK) {
    drawDisplay0NonSteno(NAVIGATION_IMAGE, 48, 8);
  } else if (layer & FUNCTION_MASK) {
    drawDisplay0NonSteno(FUNCTION_IMAGE, 48, 8);
  } else if (layer & SYMBOL_MASK) {
    drawDisplay0NonSteno(SYMBOL_IMAGE, 0, 0);
  } else if (layer & STENO_MASK) {
    setAutoDraw(0, AUTO_DRAW_PAPER_TAPE);
  } else {
    drawDisplay0NonSteno(QWERTY_IMAGE, 32, 16);
  }
}

func drawBar(barValue) {
  drawImage(0, 40, 52, BAR_IMAGES + barValue * 66);
}

func drawBrightness() {
  updateDisplay0();
  drawImage(0, 18, 48, BRIGHTNESS_IMAGE);
  drawBar(brightness);
}

func drawSpeed() {
  updateDisplay0();
  drawImage(0, 18, 48, SPEED_IMAGE);
  drawBar(speed);
}

func drawHueSpread() {
  updateDisplay0();
  drawImage(0, 18, 48, HUE_SPREAD_IMAGE);
  drawBar(hueSpread);
}

func drawSaturation() {
  updateDisplay0();
  drawImage(0, 18, 48, CONTRAST_IMAGE);
  drawBar(saturation);
}

func setLayer(value) {
  layer = value;
  updateDisplay0();
}

func isDisplayUpdateScanCode(scanCode) var {
  return SC_L_CTRL <= scanCode && scanCode <= SC_R_META;
}

func pressScanCodeAndUpdateDisplay(scanCode) {
  pressScanCode(scanCode);
  if (isDisplayUpdateScanCode(scanCode)) {
    updateDisplay0();
  }
}

func releaseScanCodeAndUpdateDisplay(scanCode) {
  releaseScanCode(scanCode);
  if (isDisplayUpdateScanCode(scanCode)) {
    updateDisplay0();
  }
}

func handlePress(qwertyKey, stenoKey, symbolsKey, functionKey, navKey) {
  lastActionTime = getTime();
  otherPressCount = otherPressCount + 1;
  if (layer & SETTINGS_MASK) {
    // Do nothing!
  } else if (layer & NAV_MASK) {
    pressScanCodeAndUpdateDisplay(navKey);
  } else if (layer & FUNCTION_MASK) {
    pressScanCodeAndUpdateDisplay(functionKey);
  } else if (layer & SYMBOL_MASK) {
    if (symbolsKey & SYM_SHIFT) {
      pressScanCodeAndUpdateDisplay(SC_L_SHIFT);
    }
    pressScanCodeAndUpdateDisplay(symbolsKey & 0xff);
  } else if (layer & STENO_MASK) {
    pressStenoKey(stenoKey);
  } else {
    pressScanCodeAndUpdateDisplay(qwertyKey);
  }
}

func handleRelease(qwertyKey, stenoKey, symbolsKey, functionKey, navKey) {
  lastActionTime = getTime();
  if (layer & SETTINGS_MASK) {
    // Do nothing!
  } else if (layer & NAV_MASK) {
    releaseScanCodeAndUpdateDisplay(navKey);
  } else if (layer & FUNCTION_MASK) {
    releaseScanCodeAndUpdateDisplay(functionKey);
  } else if (layer & SYMBOL_MASK) {
    releaseScanCodeAndUpdateDisplay(symbolsKey & 0xff);
    if (symbolsKey & SYM_SHIFT) {
      releaseScanCodeAndUpdateDisplay(SC_L_SHIFT);
    }
  } else if (layer & STENO_MASK) {
    releaseStenoKey(stenoKey);
  } else {
    releaseScanCodeAndUpdateDisplay(qwertyKey);
  }
}

func onPress0() { handlePress(SC_TAB, SK_NONE, SC_GRAVE, SC_NONE, SC_NONE); }
func onRelease0() { handleRelease(SC_TAB, SK_NONE, SC_GRAVE, SC_NONE, SC_NONE); }

func onPress1() { handlePress(SC_Q, SK_S1, SC_1, SC_F9, SC_NONE); }
func onRelease1() { handleRelease(SC_Q, SK_S1, SC_1, SC_F9, SC_NONE); }

func onPress2() { handlePress(SC_W, SK_TL, SC_2, SC_F10, SC_NONE); }
func onRelease2() { handleRelease(SC_W, SK_TL, SC_2, SC_F10, SC_NONE); }

func onPress3() {
  handlePress(SC_E, SK_PL, SC_3, SC_F11, SC_NONE);

  if (layer & SETTINGS_MASK) {
    console("set_steno_mode embedded");
    updateDisplay0();
    drawText(0, 64, 60, 0, TEXT_ALIGNMENT_MIDDLE, "Embedded Steno");
  }
}
func onRelease3() { handleRelease(SC_E, SK_PL, SC_3, SC_F11, SC_NONE); }

func onPress4() { handlePress(SC_R, SK_HL, SC_4, SC_F12, SC_NONE); }
func onRelease4() { handleRelease(SC_R, SK_HL, SC_4, SC_F12, SC_NONE); }

func onPress5() { handlePress(SC_T, SK_STAR1, SC_5, SC_NONE, SC_NONE); }
func onRelease5() { handleRelease(SC_T, SK_STAR1, SC_5, SC_NONE, SC_NONE); }

func onPress6() {
  handlePress(SC_Y, SK_STAR2, SC_6, SC_NONE, SC_CONSUMER_VOLUME_UP);

  if (layer & SETTINGS_MASK) {
    if (speed < 8) {
      // Adjust hue to avoid glitches.
      hueShift = hueShift + getTime() * (SPEED_VALUES[speed] - SPEED_VALUES[speed + 1]);

      speed = speed + 1;
    }
    drawSpeed();
  }
}
func onRelease6() { handleRelease(SC_Y, SK_STAR2, SC_6, SC_NONE, SC_CONSUMER_VOLUME_UP); }

func onPress7() { handlePress(SC_U, SK_FR, SC_7, SC_NONE, SC_BACKSPACE); }
func onRelease7() { handleRelease(SC_U, SK_FR, SC_7, SC_NONE, SC_BACKSPACE); }

func onPress8() {
  handlePress(SC_I, SK_PR, SC_8, SC_NONE, SC_UP);

  if (layer & SETTINGS_MASK) {
    if (brightness < 8) {
      brightness = brightness + 1;
      updateKeyRgb();
      updateUnderglowRgb();
      updateScreenContrast();
    }
    drawBrightness();
  }
}
func onRelease8() { handleRelease(SC_I, SK_PR, SC_8, SC_NONE, SC_UP); }

func onPress9() {
  handlePress(SC_O, SK_LR, SC_9, SC_NONE, SC_DELETE);

  if (layer & SETTINGS_MASK) {
    if (saturation < 8) {
      saturation = saturation + 1;
      updateKeyRgb();
    }
    drawSaturation();
  }
}
func onRelease9() { handleRelease(SC_O, SK_LR, SC_9, SC_NONE, SC_DELETE); }

func onPress10() {
  handlePress(SC_P, SK_TR, SC_0, SC_NONE, SC_PAGE_UP);

  if (layer & SETTINGS_MASK) {
    hueShift = hueShift - 0x800;
  }
}
func onRelease10() { handleRelease(SC_P, SK_TR, SC_0, SC_NONE, SC_PAGE_UP); }

func onPress11() {
  handlePress(SC_BACKSPACE, SK_DR, SC_EQUAL, SC_NONE, SC_HOME);

  if (layer & SETTINGS_MASK) {
    if (hueSpread < 8) {
      hueSpread = hueSpread + 1;
    }
    drawHueSpread();
  }
}
func onRelease11() { handleRelease(SC_BACKSPACE, SK_DR, SC_EQUAL, SC_NONE, SC_HOME); }

var timer12;
func onPress12() {
  handlePress(SC_L_CTRL, SK_NONE, SC_GRAVE | SYM_SHIFT, SC_NONE, SC_NONE);
  timer12 = getTime();
  otherPressCount = 0;
}
func onRelease12() {
  handleRelease(SC_L_CTRL, SK_NONE, SC_GRAVE | SYM_SHIFT, SC_NONE, SC_NONE);
  if ((layer | otherPressCount) == 0 && getTime() - timer12 < TAP_THRESHOLD) {
    otherPressCount = otherPressCount + 1;
    tapScanCode(SC_ESC);
  }
}

func onPress13() { handlePress(SC_A, SK_S2, SC_1 | SYM_SHIFT, SC_F5, SC_L_META); }
func onRelease13() { handleRelease(SC_A, SK_S2, SC_1 | SYM_SHIFT, SC_F5, SC_L_META); }

func onPress14() { handlePress(SC_S, SK_KL, SC_2 | SYM_SHIFT, SC_F6, SC_L_ALT); }
func onRelease14() { handleRelease(SC_S, SK_KL, SC_2 | SYM_SHIFT, SC_F6, SC_L_ALT); }

func onPress15() {
  handlePress(SC_D, SK_WL, SC_3 | SYM_SHIFT, SC_F7, SC_L_CTRL);
  if (layer & SETTINGS_MASK) {
    console("set_steno_mode gemini");
    updateDisplay0();
    drawText(0, 64, 60, 0, TEXT_ALIGNMENT_MIDDLE, "Gemini PR");
  }
}
func onRelease15() { handleRelease(SC_D, SK_WL, SC_3 | SYM_SHIFT, SC_F7, SC_L_CTRL); }

func onPress16() { handlePress(SC_F, SK_RL, SC_4 | SYM_SHIFT, SC_F8, SC_L_SHIFT); }
func onRelease16() { handleRelease(SC_F, SK_RL, SC_4 | SYM_SHIFT, SC_F8, SC_L_SHIFT); }

func onPress17() { handlePress(SC_G, SK_STAR3, SC_5 | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease17() { handleRelease(SC_G, SK_STAR3, SC_5 | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress18() {
  handlePress(SC_H, SK_STAR4, SC_6 | SYM_SHIFT, SC_NONE, SC_CONSUMER_VOLUME_DOWN);
  if (layer & SETTINGS_MASK) {
    if (speed > 0) {
      // Adjust hue to avoid glitches.
      hueShift = hueShift + getTime() * (SPEED_VALUES[speed] - SPEED_VALUES[speed - 1]);

      speed = speed - 1;
    }
    drawSpeed();
  }
}
func onRelease18() { handleRelease(SC_H, SK_STAR4, SC_6 | SYM_SHIFT, SC_NONE, SC_CONSUMER_VOLUME_DOWN); }

func onPress19() { handlePress(SC_J, SK_RR, SC_7 | SYM_SHIFT, SC_L_SHIFT, SC_LEFT); }
func onRelease19() { handleRelease(SC_J, SK_RR, SC_7 | SYM_SHIFT, SC_L_SHIFT, SC_LEFT); }

func onPress20() {
  handlePress(SC_K, SK_BR, SC_8 | SYM_SHIFT, SC_L_CTRL, SC_DOWN);

  if (layer & SETTINGS_MASK) {
    if (brightness > 0) {
      brightness = brightness - 1;
      updateKeyRgb();
      updateUnderglowRgb();
      updateScreenContrast();
    }
    drawBrightness();
  }
}
func onRelease20() { handleRelease(SC_K, SK_BR, SC_8 | SYM_SHIFT, SC_L_CTRL, SC_DOWN); }

func onPress21() {
  handlePress(SC_L, SK_GR, SC_9 | SYM_SHIFT, SC_L_ALT, SC_RIGHT);

  if (layer & SETTINGS_MASK) {
    if (saturation > 0) {
      saturation = saturation - 1;
      updateKeyRgb();
    }
    drawSaturation();
  }
}
func onRelease21() { handleRelease(SC_L, SK_GR, SC_9 | SYM_SHIFT, SC_L_ALT, SC_RIGHT); }

func onPress22() {
  handlePress(SC_SEMICOLON, SK_SR, SC_0 | SYM_SHIFT, SC_L_META, SC_PAGE_DOWN);

  if (layer & SETTINGS_MASK) {
    hueShift = hueShift + 0x800;
  }
}
func onRelease22() { handleRelease(SC_SEMICOLON, SK_SR, SC_0 | SYM_SHIFT, SC_L_META, SC_PAGE_DOWN); }

var timer23;
func onPress23() {
  handlePress(SC_R_CTRL, SK_ZR, SC_EQUAL | SYM_SHIFT, SC_NONE, SC_END);
  timer23 = getTime();
  otherPressCount = 0;

  if (layer & SETTINGS_MASK) {
    if (hueSpread > 0) {
      hueSpread = hueSpread - 1;
    }
    drawHueSpread();
  }
}
func onRelease23() {
  handleRelease(SC_R_CTRL, SK_ZR, SC_EQUAL | SYM_SHIFT, SC_NONE, SC_END);
  if ((layer | otherPressCount) == 0 && getTime() - timer23 < TAP_THRESHOLD) {
    otherPressCount = otherPressCount + 1;
    tapScanCode(SC_APOSTROPHE);
  }
}

func onPress24() { handlePress(SC_L_SHIFT, SK_NONE, SC_BACKSLASH | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease24() { handleRelease(SC_L_SHIFT, SK_NONE, SC_BACKSLASH | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress25() { handlePress(SC_Z, SK_NONE, SC_BACKSLASH, SC_F1, SC_NONE); }
func onRelease25() { handleRelease(SC_Z, SK_NONE, SC_BACKSLASH, SC_F1, SC_NONE); }

func onPress26() { handlePress(SC_X, SK_NONE, SC_SEMICOLON | SYM_SHIFT, SC_F2, SC_NONE); }
func onRelease26() { handleRelease(SC_X, SK_NONE, SC_SEMICOLON | SYM_SHIFT, SC_F2, SC_NONE); }

func onPress27() {
  handlePress(SC_C, SK_NONE, SC_SEMICOLON, SC_F3, SC_NONE);
  if (layer & SETTINGS_MASK) {
    console("set_steno_mode plover_hid");
    updateDisplay0();
    drawText(0, 64, 60, 0, TEXT_ALIGNMENT_MIDDLE, "Plover HID");
  }
}
func onRelease27() { handleRelease(SC_C, SK_NONE, SC_SEMICOLON, SC_F3, SC_NONE); }

func onPress28() { handlePress(SC_V, SK_NONE, SC_MINUS, SC_F4, SC_NONE); }
func onRelease28() { handleRelease(SC_V, SK_NONE, SC_MINUS, SC_F4, SC_NONE); }

func onPress29() { handlePress(SC_B, SK_NONE, SC_L_BRACKET, SC_NONE, SC_NONE); }
func onRelease29() { handleRelease(SC_B, SK_NONE, SC_L_BRACKET, SC_NONE, SC_NONE); }

func onPress30() { handlePress(SC_L_BRACKET, SK_NONE, SC_L_BRACKET | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease30() { handleRelease(SC_L_BRACKET, SK_NONE, SC_L_BRACKET | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress31() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  pressScanCode(SC_CAPS);
}
func onRelease31() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseScanCode(SC_CAPS);
}

func onPress32() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  setLayer(layer | FUNCTION_MASK);
  pressAll();
}

func onRelease32() {
  lastActionTime = getTime();
  if (layer & FUNCTION_MASK) {
    releaseAll();
    setLayer(layer ^ FUNCTION_MASK);
  }
}

func onPress33() { handlePress(SC_R_BRACKET, SK_NONE, SC_R_BRACKET | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease33() { handleRelease(SC_R_BRACKET, SK_NONE, SC_R_BRACKET | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress34() { handlePress(SC_N, SK_NONE, SC_R_BRACKET, SC_NONE, SC_CONSUMER_MUTE); }
func onRelease34() { handleRelease(SC_N, SK_NONE, SC_R_BRACKET, SC_NONE, SC_CONSUMER_MUTE); }

func onPress35() { handlePress(SC_M, SK_NONE, SC_MINUS | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease35() { handleRelease(SC_M, SK_NONE, SC_MINUS | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress36() { handlePress(SC_COMMA, SK_NONE, SC_COMMA, SC_NONE, SC_NONE); }
func onRelease36() { handleRelease(SC_COMMA, SK_NONE, SC_COMMA, SC_NONE, SC_NONE); }

func onPress37() { handlePress(SC_DOT, SK_NONE, SC_DOT, SC_NONE, SC_NONE); }
func onRelease37() { handleRelease(SC_DOT, SK_NONE, SC_DOT, SC_NONE, SC_NONE); }

func onPress38() { handlePress(SC_SLASH, SK_NONE, SC_SLASH, SC_NONE, SC_NONE); }
func onRelease38() { handleRelease(SC_SLASH, SK_NONE, SC_SLASH, SC_NONE, SC_NONE); }

func onPress39() { handlePress(SC_R_SHIFT, SK_NONE, SC_SLASH | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease39() { handleRelease(SC_R_SHIFT, SK_NONE, SC_SLASH | SYM_SHIFT, SC_NONE, SC_NONE); }

var wasStenoLayer40;
var timer40;
func onPress40() {
  if (isInPressAll()) return;

  lastActionTime = getTime();
  wasStenoLayer40 = 0;
  timer40 = getTime();

  if (layer >> 1) return;

  wasStenoLayer40 = layer & STENO_MASK;
  otherPressCount = 0;
  if (wasStenoLayer40) {
    releaseAll();
    setLayer(layer ^ STENO_MASK);
    pressAll();
  }
}
func onRelease40() {
  lastActionTime = getTime();

  if ((otherPressCount | (layer >> 1)) == 0 && getTime() - timer40 < TAP_THRESHOLD) {
    // Do the toggle.
    if (!wasStenoLayer40) {
      releaseAll();
      setLayer(layer ^ STENO_MASK);
      pressAll();
    }
  } else {
    // Return to the original
    if (wasStenoLayer40) {
      releaseAll();
      setLayer(layer ^ STENO_MASK);
      pressAll();
    }
  }

  updateUnderglowRgb();
}

func onPress41() { handlePress(SC_L_META, SK_NUM1, SC_L_META, SC_NONE, SC_NONE); }
func onRelease41() { handleRelease(SC_L_META, SK_NUM1, SC_L_META, SC_NONE, SC_NONE); }

var timer42;
func onPress42() {
  handlePress(SC_L_ALT, SK_A, SC_L_ALT, SC_NONE, SC_NONE);
  timer42 = getTime();
  otherPressCount = 0;
}
func onRelease42() {
  handleRelease(SC_L_ALT, SK_A, SC_L_ALT, SC_NONE, SC_NONE);
  if ((layer | otherPressCount) == 0 && getTime() - timer42 < TAP_THRESHOLD) {
    otherPressCount = otherPressCount + 1;
    tapScanCode(SC_ENTER);
  }
}

func onPress43() { handlePress(SC_SPACE, SK_O, SC_L_CTRL, SC_NONE, SC_NONE); }
func onRelease43() { handleRelease(SC_SPACE, SK_O, SC_L_CTRL, SC_NONE, SC_NONE); }

func onPress44() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  setLayer(layer | NAV_MASK);
  pressAll();
}

func onRelease44() {
  lastActionTime = getTime();
  if (layer & NAV_MASK) {
    releaseAll();
    setLayer(layer ^ NAV_MASK);
  }
}

func onPress45() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  setLayer(layer | SYMBOL_MASK);
  pressAll();
}

func onRelease45() {
  lastActionTime = getTime();
  if (layer & SYMBOL_MASK) {
    releaseAll();
    setLayer(layer ^ SYMBOL_MASK);
  }
}

func onPress46() { handlePress(SC_SPACE, SK_E, SC_NONE, SC_NONE, SC_SPACE); }
func onRelease46() { handleRelease(SC_SPACE, SK_E, SC_NONE, SC_NONE, SC_SPACE); }

var timer47;
func onPress47() {
  handlePress(SC_R_ALT, SK_U, SC_NONE, SC_NONE, SC_ENTER);
  timer47 = getTime();
  otherPressCount = 0;
}
func onRelease47() {
  handleRelease(SC_R_ALT, SK_U, SC_NONE, SC_NONE, SC_ENTER);
  if ((layer | otherPressCount) == 0 && getTime() - timer47 < TAP_THRESHOLD) {
    otherPressCount = otherPressCount + 1;
    tapScanCode(SC_ENTER);
  }
}

func onPress48() { handlePress(SC_R_META, SK_NUM2, SC_NONE, SC_NONE, SC_NONE); }
func onRelease48() { handleRelease(SC_R_META, SK_NUM2, SC_NONE, SC_NONE, SC_NONE); }

func onPress49() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  setLayer(layer | SETTINGS_MASK);
  pressAll();
}
func onRelease49() {
  lastActionTime = getTime();
  if (layer & SETTINGS_MASK) {
    releaseAll();
    setLayer(layer ^ SETTINGS_MASK);
  }
}

func onEncoderCW0(delta) {}
func onEncoderCCW0(delta) {}

func onEncoderCW1(delta) {}
func onEncoderCCW1(delta) {}
